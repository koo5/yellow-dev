name: Shared E2E Tests

# Make this workflow reusable
on:
  workflow_call:
    inputs:
      client_repo:
        description: 'The source repository for the yellow-client code'
        required: false
        type: string
        default: ''
      client_ref:
        description: 'The ref (branch, tag, commit) to checkout for the client code'
        required: false
        type: string
        default: ''

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Print working directory
      run: |
        pwd
        ls -la

    # Conditionally checkout the client repo if specified
    - name: Checkout custom client code
      if: inputs.client_repo != ''
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.client_repo }}
        ref: ${{ inputs.client_ref }}
        path: source-client
    
    - name: Checkout yellow-dev
      uses: actions/checkout@v3
      with:
        repository: koo5/yellow-dev
        ref: master
        path: yellow-dev
        submodules: recursive
    
    # Replace yellow-client code if a custom client was checked out
    - name: Replace yellow-client code with custom source
      if: inputs.client_repo != ''
      run: |
        rm -rf yellow-dev/yellow-client
        cp -r source-client yellow-dev/yellow-client
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Set up Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    # Install Docker Compose v2
    - name: Install Docker Compose
      run: |
        # Docker Compose V2 is part of Docker CLI
        docker compose version || {
          echo "Docker Compose not found, installing..."
          # Ensure Docker CLI is installed and has compose plugin
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
        }
        
        # Verify installation
        docker compose version
        
        # Create executable 'docker-compose' script in PATH for backward compatibility
        sudo tee /usr/local/bin/docker-compose > /dev/null << 'EOF'
        #!/bin/bash
        docker compose "$@"
        EOF
        sudo chmod +x /usr/local/bin/docker-compose
        
        # Verify docker-compose script works
        docker-compose version
    
    # Set up Docker buildx with layer caching capabilities
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      id: buildx
      with:
        install: true
        driver-opts: |
          image=moby/buildkit:latest
          network=host
    
    # Create cache directory for Docker layers
    - name: Create buildx cache directory
      run: |
        sudo mkdir -p /tmp/.buildx-cache
        sudo mkdir -p /tmp/.buildx-cache-new
        sudo chmod -R 777 /tmp/.buildx-cache /tmp/.buildx-cache-new
    
    # Cache Docker layers using GitHub's cache
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Print directory structure
      run: |
        find . -type d -maxdepth 3
    
    - name: Install playwright
      run: |
        cd yellow-dev/yellow-client
        bun install
        bun x playwright install --with-deps
    
    - name: Install Fish Shell and MariaDB Client
      run: |
        sudo apt-get update
        sudo apt-get install -y fish mariadb-client
    
    # Set docker-compose to use buildx and cached layers
    - name: Run E2E Tests with layer caching
      run: |
        ls -la
        cd yellow-dev
        ls -la
        
        # Verify script exists
        if [ ! -f "scripts/run_compose_and_test.py" ]; then
          echo "ERROR: Test script not found at expected location scripts/run_compose_and_test.py"
          find . -name "run_compose_and_test.py"
          exit 1
        fi
        
        # Ensure cache directories exist with proper permissions
        sudo mkdir -p /tmp/.buildx-cache /tmp/.buildx-cache-new
        sudo chmod -R 777 /tmp/.buildx-cache /tmp/.buildx-cache-new
        
        # Get User and Group IDs using different variable names to avoid readonly variables
        USER_ID=$(id -u)
        GROUP_ID=$(id -g)
        
        # Create .env file for docker-compose with BUILDX config
        cat > .env << EOF
        COMPOSE_DOCKER_CLI_BUILD=1
        DOCKER_BUILDKIT=1
        BUILDKIT_PROGRESS=plain
        DOCKER_BUILDKIT_CACHE=/tmp/.buildx-cache
        COMPOSE_DOCKER_BUILD_ARGS="--cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max"
        UID=$USER_ID
        GID=$GROUP_ID
        CI=true
        IS_CI=1
        EOF
        
        # Display .env file for debugging
        echo "Created .env file with contents:"
        cat .env
        
        # Check if docker-compose.ci.yml exists
        if [ ! -f "docker-compose.ci.yml" ]; then
          echo "Warning: docker-compose.ci.yml not found. The script will create a default one."
        fi
        
        # Check for Dockerfiles in service contexts
        echo "Checking for Dockerfiles in service contexts..."
        for dir in yellow-server-common yellow-server yellow-client yellow-admin yellow-server-module-messages; do
          if [ -f "$dir/Dockerfile" ]; then
            echo "✅ $dir/Dockerfile exists"
          else
            echo "❌ $dir/Dockerfile is missing - creating empty placeholder"
            # Create empty placeholder - will be completed during build
            echo "FROM alpine:latest" > "$dir/Dockerfile"
            echo "COPY . /app" >> "$dir/Dockerfile"
            echo "WORKDIR /app" >> "$dir/Dockerfile"
          fi
        done
        
        # Check which services use bind mounts in docker-compose.yml
        echo "Checking for bind mounts in docker-compose.yml that need CI overrides..."
        grep -A5 "volumes:" docker-compose.yml || echo "No volumes section found"
        
        # Generate diagnostic info for debugging
        echo "=== Docker info ==="
        docker info
        
        echo "=== Docker Compose version ==="
        docker compose version
        
        echo "=== Docker BuildX version ==="
        docker buildx version
        
        # Run docker compose config to validate configuration
        docker compose -f docker-compose.yml -f docker-compose.ci.yml config > docker-compose.merged.yml
        echo "Generated merged Docker Compose configuration in docker-compose.merged.yml"
        
        # Run the tests with explicit docker compose syntax and BUILDX enabled
        DOCKER_BUILDX_CONTEXT=default \
        DOCKER_BUILDKIT=1 \
        BUILDKIT_PROGRESS=plain \
        CI=true IS_CI=1 USER_ID=$USER_ID GROUP_ID=$GROUP_ID \
        COMPOSE_BAKE=true python scripts/run_compose_and_test.py
        
        # Move cache for next run
        if [ -d "/tmp/.buildx-cache-new" ]; then
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        else
          echo "Warning: /tmp/.buildx-cache-new directory not found after build"
        fi