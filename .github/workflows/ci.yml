name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Generate and run CI compose file
      env:
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
        BUILDKIT_PROGRESS: plain
      run: |
        # Generate docker-compose file with hollow=false
        echo "Generating Dockerfiles and compose file..."
        python scripts/generate_compose.py --hollow=false --host-network=false
        
        # The generated compose file should be docker-compose.full.stack.yml
        COMPOSE_FILE="docker-compose.full.stack.yml"
        
        # Check that file exists
        if [ ! -f "$COMPOSE_FILE" ]; then
            echo "ERROR: Expected compose file $COMPOSE_FILE not found!"
            ls -la docker-compose*.yml
            exit 1
        fi
        
        # Show generated Dockerfiles
        echo "Checking generated Dockerfiles:"
        ls -la yellow-client/Dockerfile_full
        head -n 5 yellow-client/Dockerfile_full
        
        # Run database initialization and prepare services
        export CI=true
        export USER_ID=$(id -u)
        export GROUP_ID=$(id -g)
        echo "Starting services in detached mode with USER_ID=$USER_ID and GROUP_ID=$GROUP_ID..."
        docker compose -f $COMPOSE_FILE up --build --detach
        
        # Wait for services to be healthy
        echo "Waiting for services to be healthy..."
        docker compose -f $COMPOSE_FILE ps
        
        # Database will be initialized automatically by container healthchecks
        
        # Run Playwright tests in the dedicated container
        echo "Running Playwright tests in dedicated container..."
        docker compose -f $COMPOSE_FILE run playwright
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-test-results
        path: yellow-client/playwright-report/
        retention-days: 30