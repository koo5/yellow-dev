
services:

  mariadb-init:
    image: alpine
    container_name: mariadb-init
    volumes:
      - mariadb_tmp:/mariadb_tmp
    command: ["sh", "-c", "mkdir -p /mariadb_tmp && chmod 1777 /mariadb_tmp"]
    entrypoint: []

  mariadb:
    image: mariadb:10.5
    container_name: mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      TMPDIR: /mariadb_tmp
    volumes:
      - mariadb:/var/lib/mysql
      - mariadb_tmp:/mariadb_tmp
    depends_on:
      - mariadb-init
    deploy:
      restart_policy:
        condition: any
    network_mode: "host"
    healthcheck:
      #test: "/bin/true" mysql  2>&1 | grep connect something ??
      test: "mariadb --protocol=tcp --host=localhost --user=workaround --password=whyistherenoping --force 2>&1 | grep -v \"Can't connect to server\""
      start_interval: 1s #Docker Engine version 25.0 or later
      interval: 10s
      timeout: 20s
      retries: 30


  common-init:
    network_mode: "host"
    build:
      context: ./yellow-server-common/
      args:
        UID: "${UID:-1000}"
        GID: "${GID:-1000}"
    volumes:
      - ./yellow-server-common:/app/yellow-server-common
    command: ["sh", "-c", "cd /app/yellow-server-common; ~/.bun/bin/bun i --frozen-lockfile"]
    entrypoint: []


  server-init:
    image: alpine
    volumes:
      - server_tmp:/tmp
    command: ["sh", "-c", "mkdir -p /tmp && chmod 1777 /tmp"]
    entrypoint: []


  server:
    network_mode: "host"
    build:
      context: ./yellow-server/
      args:
        UID: "${UID:-1000}"
        GID: "${GID:-1000}"
    volumes:
      - server_tmp:/tmp
      - server_logs:/var/log/yellow
      - ./yellow-server:/app/app
      - ./yellow-server-common:/app/yellow-server-common
      - ./yellow-server-settings.json:/app/settings.json
    environment:
      - VITE_YELLOW_SETTINGS_PATH=/app/settings.json
      - CI=${CI:-}
    depends_on:
      common-init: {condition: service_completed_successfully}
      server-init: {condition: service_completed_successfully}
      mariadb: {condition: service_healthy}
      #messages: {condition: service_healthy}
    deploy:
      restart_policy:
        condition: any
    healthcheck:
      test: "curl -v --fail http://localhost:8085/health"
      start_interval: 1s #Docker Engine version 25.0 or later
      interval: 10s
      timeout: 20s
      retries: 30


  messages:
    network_mode: "host"
    build:
      context: ./yellow-server-module-messages/
      args:
        UID: "${UID:-1000}"
        GID: "${GID:-1000}"
    volumes:
      - server_logs:/var/log/yellow
      - ./yellow-server-module-messages:/app/app
      - ./yellow-server-common:/app/yellow-server-common
      - ./yellow-server-module-messages-settings.json:/app/settings.json
    environment:
      - VITE_YELLOW_SETTINGS_PATH=/app/settings.json
      - CI=${CI:-}
    depends_on:
      common-init: {condition: service_completed_successfully}
      mariadb: {condition: service_healthy}
    deploy:
      restart_policy:
        condition: any
    healthcheck:
      test: "curl -v --fail http://localhost:25001/health"
      start_interval: 1s
      interval: 30s
      timeout: 20s
      retries: 30



#  messages2:
#    network_mode: "host"
#    build:
#      context: ./messages2/
#      args:
#        UID: "${UID:-1000}"
#        GID: "${GID:-1000}"
#    volumes:
#      - server_logs:/var/log/yellow
#      - ./messages2:/app/app
#      - ./yellow-server-common:/app/yellow-server-common
#      - ./messages2.json:/app/settings.json
#    environment:
#      - VITE_YELLOW_SETTINGS_PATH=/app/settings.json
#    depends_on: {mariadb: {condition: service_healthy}}
#    deploy:
#      restart_policy:
#        condition: any
#    healthcheck:
#      test: "curl -v --fail http://localhost:25002/health"
#      start_interval: 1s
#      interval: 30s
#      timeout: 20s
#      retries: 30
#
#


#  dating:
#    network_mode: "host"
#    build:
#      context: ./yellow-server-module-dating/
#      args:
#        UID: "${UID:-1000}"
#        GID: "${GID:-1000}"
#    volumes:
#      - server_logs:/var/log/yellow
#      - ./yellow-server-module-dating:/app/app
#      - ./yellow-server-common:/app/yellow-server-common
#      - ./dating2.json:/app/settings.json
#    environment:
#      - VITE_YELLOW_SETTINGS_PATH=/app/settings.json
#    depends_on: {mariadb: {condition: service_healthy}}
#    deploy:
#      restart_policy:
#        condition: any
#    healthcheck:
#      test: "curl -v --fail http://localhost:25003/health"
#      start_interval: 1s
#      interval: 30s
#      timeout: 20s
#      retries: 30
#


  admin:
    network_mode: "host"
    build:
      context: ./yellow-admin/
      args:
        UID: "${UID:-1000}"
        GID: "${GID:-1000}"
    volumes:
      - ./yellow-admin:/app/app
      - ./yellow-server-common:/app/yellow-server-common
    depends_on: {server: {condition: service_healthy}}
    deploy:
      restart_policy:
        condition: any
    healthcheck:
      test: "curl -v --fail http://localhost:4000/#health"
      start_interval: 1s #Docker Engine version 25.0 or later
      interval: 30s
      timeout: 20s
      retries: 30


  client:
    network_mode: "host"
    build:
      context: ./yellow-client/
      args:
        UID: "${UID:-1000}"
        GID: "${GID:-1000}"
    volumes:
      - ./yellow-client:/app/app
    environment:
      - VITE_YELLOW_CLIENT_PING_INTERVAL=10000
      - VITE_YELLOW_CLIENT_WALLET_PROVIDER_RECONNECT_INTERVAL=1000000
      - VITE_YELLOW_CLIENT_DEFAULT_ACCOUNTS=${VITE_YELLOW_CLIENT_DEFAULT_ACCOUNTS:-}
      - VITE_YELLOW_CLIENT_DEBUG=true
      - COMMAND="${CLIENT_COMMAND:-./start-docker-dev.sh}"

    #depends_on: {server: {condition: service_healthy}}
    deploy:
      restart_policy:
        condition: any
    healthcheck:
      test: "curl -v --fail http://localhost:3000/#health"
      start_interval: 1s #Docker Engine version 25.0 or later
      interval: 30s
      timeout: 20s
      retries: 30

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
#    container_name: elasticsearch
#    environment:
#      - discovery.type=single-node
#      - node.name=elastic-1
#      - cluster.name=docker-logging-cluster
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - elasticsearch:/usr/share/elasticsearch/data
#    ports:
#      - "9200:9200"

volumes:
  mariadb:
  mariadb_tmp:
  server_logs:
  server_tmp:
#  elasticsearch:


